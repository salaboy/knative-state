/*
Copyright 2021 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/salaboy/knative-state/pkg/apis/state/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StateMachineRunnerLister helps list StateMachineRunners.
// All objects returned here must be treated as read-only.
type StateMachineRunnerLister interface {
	// List lists all StateMachineRunners in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StateMachineRunner, err error)
	// StateMachineRunners returns an object that can list and get StateMachineRunners.
	StateMachineRunners(namespace string) StateMachineRunnerNamespaceLister
	StateMachineRunnerListerExpansion
}

// stateMachineRunnerLister implements the StateMachineRunnerLister interface.
type stateMachineRunnerLister struct {
	indexer cache.Indexer
}

// NewStateMachineRunnerLister returns a new StateMachineRunnerLister.
func NewStateMachineRunnerLister(indexer cache.Indexer) StateMachineRunnerLister {
	return &stateMachineRunnerLister{indexer: indexer}
}

// List lists all StateMachineRunners in the indexer.
func (s *stateMachineRunnerLister) List(selector labels.Selector) (ret []*v1.StateMachineRunner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StateMachineRunner))
	})
	return ret, err
}

// StateMachineRunners returns an object that can list and get StateMachineRunners.
func (s *stateMachineRunnerLister) StateMachineRunners(namespace string) StateMachineRunnerNamespaceLister {
	return stateMachineRunnerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StateMachineRunnerNamespaceLister helps list and get StateMachineRunners.
// All objects returned here must be treated as read-only.
type StateMachineRunnerNamespaceLister interface {
	// List lists all StateMachineRunners in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StateMachineRunner, err error)
	// Get retrieves the StateMachineRunner from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.StateMachineRunner, error)
	StateMachineRunnerNamespaceListerExpansion
}

// stateMachineRunnerNamespaceLister implements the StateMachineRunnerNamespaceLister
// interface.
type stateMachineRunnerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StateMachineRunners in the indexer for a given namespace.
func (s stateMachineRunnerNamespaceLister) List(selector labels.Selector) (ret []*v1.StateMachineRunner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StateMachineRunner))
	})
	return ret, err
}

// Get retrieves the StateMachineRunner from the indexer for a given namespace and name.
func (s stateMachineRunnerNamespaceLister) Get(name string) (*v1.StateMachineRunner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("statemachinerunner"), name)
	}
	return obj.(*v1.StateMachineRunner), nil
}
